import os
import subprocess
import tkinter
from tkinter import filedialog


# Main function
def main():
    app_version = "v1.0"

    input_dir = input("What's the name of your project? ")
    print("[!] Where should this project be stored? [Hit enter to select location]")
    print(
        "[!] This feature is buggy, look for the select folder dialog among your open windows and choose a directory.")
    tkinter.Tk().withdraw()
    gen_directory = filedialog.askdirectory(title="Select Directory for Generation", mustexist=True)
    project_dir: str = os.path.normpath(os.path.join(gen_directory, input_dir))
    folders: list[str] = ["routes", "lib", "controllers", "models", "middlewares"]
    files: list[str] = ["app.js", ".env", ".env.example", ".gitignore", "package.json", ".prettierrc",
                        "routes/index.routes.js", "lib/helpers.js", "controllers/index.controller.js"]
    os.mkdir(project_dir)

    # Create folders
    for folder in folders:
        depth_1_folder: str = os.path.normpath(os.path.join(project_dir, folder))
        os.mkdir(depth_1_folder)

    # Create files
    for file in files:
        if file == ".env":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('# Basic application settings\n'
                    f'NAME={input_dir}\n'
                    'PORT=8080\n'
                    'FRONTEND_URL=http://localhost:4200\n'
                    '\n'
                    '# The production state of the app is used to show errors if the app is not in production mode\n'
                    '# Database connection\n'
                    'MONGODB_URI=mongodb://localhost:27017/databaseName')
            f.close()
            continue
        if file == ".env.example":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('# Basic application settings\n'
                    'NAME=\n'
                    'PORT=\n'
                    'FRONTEND_URL=\n'
                    '\n'
                    '# The production state of the app is used to show errors if the app is not in production mode\n'
                    '# Database connection\n'
                    'MONGODB_URI=')
            f.close()
            continue
        if file == ".gitignore":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('# Logs\n'
                    'logs\n'
                    '*.log\n'
                    'npm-debug.log*\n'
                    'yarn-debug.log*\n'
                    'yarn-error.log*\n'
                    'lerna-debug.log*\n'
                    '\n'
                    '# Diagnostic reports (https://nodejs.org/api/report.html)\n'
                    'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n'
                    '\n'
                    '# Runtime data\n'
                    'pids\n'
                    '*.pid\n'
                    '*.seed\n'
                    '*.pid.lock\n'
                    '\n'
                    '# Directory for instrumented libs generated by jscoverage/JSCover\n'
                    'lib-cov\n'
                    '\n'
                    '# Coverage directory used by tools like istanbul\n'
                    'coverage\n'
                    '*.lcov\n'
                    '\n'
                    '# nyc test coverage\n'
                    '.nyc_output\n'
                    '\n'
                    '# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n'
                    '.grunt\n'
                    '\n'
                    '# Bower dependency directory (https://bower.io/)\n'
                    'bower_components\n'
                    '\n'
                    '# node-waf configuration\n'
                    '.lock-wscript\n'
                    '\n'
                    '# Compiled binary addons (https://nodejs.org/api/addons.html)\n'
                    'build/Release\n'
                    '\n'
                    '# Dependency directories\n'
                    'node_modules/\n'
                    'jspm_packages/\n'
                    '\n'
                    '# TypeScript v1 declaration files\n'
                    'typings/\n'
                    '\n'
                    '# TypeScript cache\n'
                    '*.tsbuildinfo\n'
                    '\n'
                    '# Optional npm cache directory\n'
                    '.npm\n'
                    '\n'
                    '# Optional eslint cache\n'
                    '.eslintcache\n'
                    '\n'
                    '# Microbundle cache\n'
                    '.rpt2_cache/\n'
                    '.rts2_cache_cjs/\n'
                    '.rts2_cache_es/\n'
                    '.rts2_cache_umd/\n'
                    '\n'
                    '# Optional REPL history\n'
                    '.node_repl_history\n'
                    '\n'
                    '# Output of \'npm pack\'\n'
                    '*.tgz\n'
                    '\n'
                    '# Yarn Integrity file\n'
                    '.yarn-integrity\n'
                    '\n'
                    '# dotenv environment variables file\n'
                    '.env\n'
                    '.env.test\n'
                    '\n'
                    '# parcel-bundler cache (https://parceljs.org/)\n'
                    '.cache\n'
                    '\n'
                    '# Next.js build output\n'
                    '.next\n'
                    '\n'
                    '# Nuxt.js build / generate output\n'
                    '.nuxt\n'
                    'dist\n'
                    '\n'
                    '# Gatsby files\n'
                    '.cache/\n'
                    '# Comment in the public line in if your project uses Gatsby and *not* Next.js\n'
                    '# https://nextjs.org/blog/next-9-1#public-directory-support\n'
                    '# public\n'
                    '\n'
                    '# vuepress build output\n'
                    '.vuepress/dist\n'
                    '\n'
                    '# Serverless directories\n'
                    '.serverless/\n'
                    '\n'
                    '# FuseBox cache\n'
                    '.fusebox/\n'
                    '\n'
                    '# DynamoDB Local files\n'
                    '.dynamodb/\n'
                    '\n'
                    '# TernJS port file\n'
                    '.tern-port\n')
            f.close()
            continue
        if file == "package.json":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('{\n'
                    f'	"name": "{input_dir}",\n'
                    '	"version": "1.0.0",\n'
                    '	"description": "Just another express api.",\n'
                    '	"main": "app.js",\n'
                    '	"scripts": {\n'
                    '		"start": "node app.js",\n'
                    '		"dev": "nodemon app.js"\n'
                    '	},\n'
                    '	"keywords": [],\n'
                    '	"author": "Roshane-Johnson",\n'
                    '	"license": "ISC",\n'
                    '	"type": "commonjs",\n'
                    '	"dependencies": {\n'
                    '		"bcrypt": "^5.0.1",\n'
                    '		"cors": "^2.8.5",\n'
                    '		"dotenv": "^16.0.0",\n'
                    '		"express": "^4.18.1",\n'
                    '		"ip": "^1.1.8",\n'
                    '		"mongoose": "^6.5.0"\n'
                    '	},\n'
                    '	"devDependencies": {\n'
                    '		"nodemon": "^2.0.16"\n'
                    '	},\n'
                    '	"engines": {\n'
                    '		"node": "^16.13.2",\n'
                    '		"npm": "^8.5.0"\n'
                    '	}\n'
                    '}\n')
            f.close()
            continue
        if file == "app.js":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('require(\'dotenv/config\')\n'
                    'const express = require(\'express\')\n'
                    'const mongoose = require(\'mongoose\')\n'
                    'const cors = require(\'cors\')\n'
                    'const app = express()\n'
                    'const ip = require(\'ip\')\n'
                    'const PORT = process.env.PORT || 8080\n'
                    f'const NAME = process.env.NAME || \'{input_dir}\'\n'
                    '\n'
                    '/* Middlewares */\n'
                    'app.use(express.json())\n'
                    'app.use(express.urlencoded({ extended: true }))\n'
                    'app.use(cors([process.env.FRONTEND_URL, process.env.PRODUCTION ? undefined : \'*\']))\n'
                    '\n'
                    '/* Routers */\n'
                    'const indexRouter = require(\'./routes/index.routes\')\n'
                    'const { DevLog } = require(\'./lib/helpers\')\n'
                    '\n'
                    'app.use(\'/\', indexRouter)\n'
                    '\n'
                    '/* Start Express App */\n'
                    'mongoose\n'
                    '	.connect(process.env.MONGODB_URI)\n'
                    '	.then(() => {\n'
                    '		app.listen(PORT, () => {\n'
                    '			console.log(\n'
                    '				`\\r==========================================================\\n\n'
                    '				\\r\\t[*] Endpoints for \\x1b[34m${NAME}\\x1b[0m are available [*]\\n\n'
                    '				\\r\\t[*] Local: \\x1b[4m\\x1b[32mhttp://localhost:${PORT}\\x1b[0m\\r\n'
                    '				\\r\\t[*] Your Network: \\x1b[4m\\x1b[32m${`http://${ip.address()}`}:${PORT}\\x1b[0m\\r\n'
                    '				\\r\\t[*] MongoDB URI: ${process.env.MONGODB_URI}\\r\n'
                    '				\\r\\n==========================================================`\n'
                    '			)\n'
                    '		})\n'
                    '	})\n'
                    '	.catch((err) => {\n'
                    '		console.log(\'[!] Failed to connect MongoDB\')\n'
                    '		DevLog(err)\n'
                    '	})\n')
            f.close()
            continue
        if file == ".prettierrc":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('{\n'
                    '	"trailingComma": "es5",\n'
                    '	"arrowParens": "always",\n'
                    '	"useTabs": true,\n'
                    '	"tabWidth": 3,\n'
                    '	"semi": false,\n'
                    '	"jsxSingleQuote": false,\n'
                    '	"singleQuote": true,\n'
                    '	"bracketSameLine": true,\n'
                    '	"printWidth": 90,\n'
                    '	"bracketSpacing": true,\n'
                    '	"htmlWhitespaceSensitivity": "css"\n'
                    '}\n')
            f.close()
            continue
        if file == "routes/index.routes.js":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('const express = require(\'express\')\n'
                    'const router = express.Router()\n'
                    'const IndexController = require(\'../controllers/index.controller\')\n'
                    '\n'
                    'router.route(\'/\').get(IndexController.welcome).post(IndexController.fun)\n'
                    '\n'
                    'module.exports = router\n')
            f.close()
            continue
        if file == "lib/helpers.js":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('require(\'dotenv/config\')\n'
                    '\n'
                    '/**\n'
                    ' *\n'
                    ' * @param {Response} res Express app response parameter\n'
                    ' * @param {Array} data Data to return as json to the endpoint\n'
                    ' * @param {String} message Message to return as json to the endpoint. Default: "success"\n'
                    ' * @param {Number} status HTTP Status Code to return to endpoint. Default: 200\n'
                    ' * @returns\n'
                    ' */\n'
                    'function SuccessResponse(res, data = [], message = \'success\', status = 200) {\n'
                    '	return res.status(status).json({ message, status, data })\n'
                    '}\n'
                    '\n'
                    '/**\n'
                    ' *\n'
                    ' * @param {Response} res Express app response parameter\n'
                    ' * @param {Array} data Data to return as json to the endpoint\n'
                    ' * @param {String} message Message to return as json to the endpoint. Default: "error"\n'
                    ' * @param {Number} status HTTP Status Code to return to endpoint. Default: 500\n'
                    ' * @returns\n'
                    ' */\n'
                    'function ErrorResponse(res, data = [], message = \'error\', status = 500) {\n'
                    '	return res.status(status).json({ message, status, data })\n'
                    '}\n'
                    '\n'
                    '/**\n'
                    ' * Logs information if the application is in development mode\n'
                    ' * @param {any} message Information to output\n'
                    ' */\n'
                    'function DevLog(message = \'\') {\n'
                    '	const isProduction = process.env.PRODUCTION || false\n'
                    '\n'
                    '	if (isProduction === false) {\n'
                    '		console.log(message)\n'
                    '	}\n'
                    '}\n'
                    '\n'
                    'module.exports = { SuccessResponse, ErrorResponse, DevLog }\n')
            f.close()
            continue
        if file == "controllers/index.controller.js":
            f = open(os.path.normpath(os.path.join(project_dir, file)), "x")
            f.write('class IndexController {\n'
                    '	static welcome = (req, res) => {\n'
                    '		res.status(200).json({\n'
                    '			message: \'Hello, World!\',\n'
                    f'			version: \'{app_version}\',\n'
                    '			author: \'Roshane-Johnson\',\n'
                    '		})\n'
                    '	}\n'
                    '\n'
                    '	static fun = (req, res) => {\n'
                    '		res.status(419).json({\n'
                    '			message:\n'
                    f'				\'You seem to have a lot of free time, would you like to help develop {input_dir}!\',\n'
                    f'			version: \'{app_version}\',\n'
                    '		})\n'
                    '	}\n'
                    '}\n'
                    '\n'
                    'module.exports = IndexController\n')
            f.close()
            continue

    # Generation completed
    completed(os.path.normpath(project_dir))


def banner():
    print('\n'
          '███████ ██   ██ ██████  ██████  ███████ ███████ ███████      ██████  ███████ ███    ██ \n'
          '██       ██ ██  ██   ██ ██   ██ ██      ██      ██          ██       ██      ████   ██ \n'
          '█████     ███   ██████  ██████  █████   ███████ ███████     ██   ███ █████   ██ ██  ██ \n'
          '██       ██ ██  ██      ██   ██ ██           ██      ██     ██    ██ ██      ██  ██ ██ \n'
          '███████ ██   ██ ██      ██   ██ ███████ ███████ ███████      ██████  ███████ ██   ████ \n'
          '\n')


def completed(generated_app_dir: str):
    # Change generated directory to absolute path if it is in the script's directory
    if "\\" not in generated_app_dir:
        generated_app_dir = os.path.normpath(os.path.join(os.path.dirname(__file__), generated_app_dir))

    print()
    print("*******************************************")
    print("[!] Express API App Generated")
    print(f"[!] Directory - {generated_app_dir}")
    print("*******************************************")
    print()

    # Open project directory after app is generated. (Windows Only)
    # explorer_path = os.path.join(os.getenv('WINDIR'), 'explorer.exe')
    # subprocess.run([explorer_path, generated_app_dir])

    # Open project directory in VSCode (if installed)
    cmd_path = os.path.join(os.getenv("WINDIR"), os.path.normpath("/Windows/System32"), "cmd.exe")
    subprocess.run([cmd_path, f"cmd.exe /C code {generated_app_dir}"])


# Script entry point
if __name__ == "__main__":
    try:
        banner()
        main()
    except KeyboardInterrupt:
        print("\033[93m\n\nUnexpected Exit\n\033[0m")
        exit(0)
